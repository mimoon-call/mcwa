name: Deploy to AWS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      image_tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_NAME: react-ssr-app-app

jobs:
  # test:
  #   name: Test and Lint
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run linting
  #       run: npm run lint

  #     - name: Run tests (if available)
  #       run: npm test || echo "No tests configured"

  #     - name: Build application
  #       run: npm run build

  # security-scan:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: test

  # steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Run Trivy vulnerability scanner
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       scan-type: 'fs'
  #       scan-ref: '.'
  #       format: 'sarif'
  #       output: 'trivy-results.sarif'

  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always()
  #       with:
  #         sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    # needs: [test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    outputs:
      image_tag: ${{ steps.version.outputs.version }}
      image_digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate version tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.image_tag }}" != "" ]; then
            echo "version=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "version=v${{ github.run_number }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "version=develop-${{ github.run_number }}" >> $GITHUB_OUTPUT
          else
            echo "version=pr-${{ github.event.number }}-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="environment=${{ github.event.inputs.environment || 'staging' }}" \
            -var="app_image_tag=${{ needs.build-and-push.outputs.image_tag }}" \
            -out=tfplan

      - name: Debug - List files
        working-directory: ./terraform
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in terraform directory:"
          ls -la
          echo "Checking if tfplan exists:"
          if [ -f "tfplan" ]; then
            echo "tfplan file exists and has size: $(ls -lh tfplan)"
          else
            echo "tfplan file does not exist"
          fi

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            ./terraform/tfplan
            ./terraform/.terraform.lock.hcl

  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [build-and-push, terraform-plan]
  #   if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
  #   environment: staging

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: '1.5.0'

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     - name: Download Terraform Plan
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: terraform-plan

  #     - name: Terraform Apply
  #       working-directory: ./terraform
  #       run: terraform apply -auto-approve tfplan

  #     - name: Get Terraform Outputs
  #       id: terraform-outputs
  #       run: |
  #         cd terraform
  #         echo "cluster_name=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT
  #         echo "service_name=$(terraform output -raw ecs_service_name)" >> $GITHUB_OUTPUT
  #         echo "task_definition_name=$(terraform output -raw ecs_task_definition_name)" >> $GITHUB_OUTPUT

  #     - name: Update ECS Task Definition
  #       run: |
  #         # Get the current task definition
  #         TASK_DEF_ARN=$(aws ecs describe-task-definition \
  #           --task-definition ${{ steps.terraform-outputs.outputs.task_definition_name }} \
  #           --region ${{ env.AWS_REGION }} \
  #           --query 'taskDefinition.taskDefinitionArn' \
  #           --output text)

  #         # Create new task definition revision with updated image
  #         aws ecs register-task-definition \
  #           --family ${{ steps.terraform-outputs.outputs.task_definition_name }} \
  #           --region ${{ env.AWS_REGION }} \
  #           --cli-input-json "$(aws ecs describe-task-definition \
  #             --task-definition ${{ steps.terraform-outputs.outputs.task_definition_name }} \
  #             --region ${{ env.AWS_REGION }} \
  #             --query 'taskDefinition | .containerDefinitions[0].image = "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:${{ needs.build-and-push.outputs.image_tag }}" | {family: .family, networkMode: .networkMode, requiresCompatibilities: .requiresCompatibilities, cpu: .cpu, memory: .memory, executionRoleArn: .executionRoleArn, taskRoleArn: .taskRoleArn, containerDefinitions: .containerDefinitions}' \
  #             --output json)"

  #     - name: Update ECS Service
  #       run: |
  #         aws ecs update-service \
  #           --cluster ${{ steps.terraform-outputs.outputs.cluster_name }} \
  #           --service ${{ steps.terraform-outputs.outputs.service_name }} \
  #           --force-new-deployment \
  #           --region ${{ env.AWS_REGION }}

  #     - name: Wait for ECS Service Stability
  #       run: |
  #         aws ecs wait services-stable \
  #           --cluster ${{ steps.terraform-outputs.outputs.cluster_name }} \
  #           --services ${{ steps.terraform-outputs.outputs.service_name }} \
  #           --region ${{ env.AWS_REGION }}

  #     - name: Get Application URL
  #       id: get-url
  #       run: |
  #         cd terraform
  #         ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "")
  #         echo "url=https://$ALB_DNS" >> $GITHUB_OUTPUT

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, terraform-plan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ./terraform

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Debug - Check downloaded plan
        working-directory: ./terraform
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in terraform directory after download:"
          ls -la
          echo "Checking if tfplan exists:"
          if [ -f "tfplan" ]; then
            echo "tfplan file exists and has size: $(ls -lh tfplan)"
            echo "tfplan file permissions: $(ls -la tfplan)"
          else
            echo "tfplan file does not exist"
            echo "Looking for any .tfplan files:"
            find . -name "*.tfplan" -type f
          fi

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: terraform-outputs
        run: |
          cd terraform
          echo "cluster_name=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT
          echo "service_name=$(terraform output -raw ecs_service_name)" >> $GITHUB_OUTPUT
          echo "task_definition_name=$(terraform output -raw ecs_task_definition_name)" >> $GITHUB_OUTPUT

      - name: Update ECS Task Definition
        run: |
          # Get the current task definition and update the image
          TASK_DEF_JSON=$(aws ecs describe-task-definition \
            --task-definition ${{ steps.terraform-outputs.outputs.task_definition_name }} \
            --region ${{ env.AWS_REGION }} \
            --output json)

          # Update the image in the task definition JSON
          UPDATED_TASK_DEF_JSON=$(echo "$TASK_DEF_JSON" | jq --arg IMAGE "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:${{ needs.build-and-push.outputs.image_tag }}" '.taskDefinition.containerDefinitions[0].image = $IMAGE | {family: .taskDefinition.family, networkMode: .taskDefinition.networkMode, requiresCompatibilities: .taskDefinition.requiresCompatibilities, cpu: .taskDefinition.cpu, memory: .taskDefinition.memory, executionRoleArn: .taskDefinition.executionRoleArn, taskRoleArn: .taskDefinition.taskRoleArn, containerDefinitions: .taskDefinition.containerDefinitions}')

          # Register the new task definition revision
          aws ecs register-task-definition \
            --family ${{ steps.terraform-outputs.outputs.task_definition_name }} \
            --region ${{ env.AWS_REGION }} \
            --cli-input-json "$UPDATED_TASK_DEF_JSON"

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{ steps.terraform-outputs.outputs.cluster_name }} \
            --service ${{ steps.terraform-outputs.outputs.service_name }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for ECS Service Stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ steps.terraform-outputs.outputs.cluster_name }} \
            --services ${{ steps.terraform-outputs.outputs.service_name }} \
            --region ${{ env.AWS_REGION }}
